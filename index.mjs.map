{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/dmeanvar.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { ndarray as dmeanvarpn } from '@stdlib/stats-base-dmeanvarpn';\n\n\n// MAIN //\n\n/**\n* Computes the mean and variance of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - `out` starting index\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanvar( 4, 1, x, 2, 1, out, 1, 0 );\n* // returns <Float64Array>[ 1.25, 6.25 ]\n*/\nfunction dmeanvar( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ) { // eslint-disable-line max-len\n\treturn dmeanvarpn( N, correction, x, strideX, offsetX, out, strideOut, offsetOut ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default dmeanvar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the mean and variance of a double-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} out - output array\n* @param {integer} strideOut - `out` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* import Float64Array from '@stdlib/array-float64';\n*\n* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\n* var out = new Float64Array( 2 );\n*\n* var v = dmeanvar( x.length, 1, x, 1, out, 1 );\n* // returns <Float64Array>[ ~0.3333, ~4.3333 ]\n*/\nfunction dmeanvar( N, correction, x, strideX, out, strideOut ) {\n\tvar ox = stride2offset( N, strideX );\n\tvar oo = ( strideOut >= 0 ) ? 0 : -strideOut;\n\tndarray( N, correction, x, strideX, ox, out, strideOut, oo );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default dmeanvar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport dmeanvar from './dmeanvar.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( dmeanvar, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default dmeanvar;\n"],"names":["dmeanvar","N","correction","x","strideX","offsetX","out","strideOut","offsetOut","dmeanvarpn","ndarray","stride2offset","setReadOnly"],"mappings":";;wUAiDA,SAASA,EAAUC,EAAGC,EAAYC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,GACtE,OAAOC,EAAYR,EAAGC,EAAYC,EAAGC,EAASC,EAASC,EAAKC,EAAWC,EACxE,CCHA,SAASR,EAAUC,EAAGC,EAAYC,EAAGC,EAASE,EAAKC,GAIlD,OADAG,EAAST,EAAGC,EAAYC,EAAGC,EAFlBO,EAAeV,EAAGG,GAEaE,EAAKC,EADlCA,GAAa,EAAM,GAAKA,GAE5BD,CACR,CCxBAM,EAAAZ,EAAA,UAAAU"}